// controllers/userController.js
const User = require("../models/users");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// üü¢ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
const registerUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    // 1. Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i." });
    }

    // 2. M√£ h√≥a m·∫≠t kh·∫©u
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // 3. T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      role, // role c√≥ th·ªÉ ƒë∆∞·ª£c truy·ªÅn v√†o ho·∫∑c ƒë·ªÉ m·∫∑c ƒë·ªãnh l√† 'student'
    });

    await newUser.save();

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      userId: newUser._id,
      email: newUser.email,
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng k√Ω", error });
  }
};

// üü¢ ƒêƒÉng nh·∫≠p
const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    // 1. T√¨m ng∆∞·ªùi d√πng theo email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng." });
    }

    // 2. So s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng." });
    }

    // 3. T·∫°o JSON Web Token (JWT)
    const payload = {
      id: user._id,
      name: user.name,
      role: user.role,
    };

    // ‚ùóÔ∏è Quan tr·ªçng: L∆∞u 'YOUR_JWT_SECRET' trong file .env ƒë·ªÉ b·∫£o m·∫≠t
    const token = jwt.sign(payload, "YOUR_JWT_SECRET", { expiresIn: "1h" });

    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token: `Bearer ${token}`,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
      },
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p", error });
  }
};

// üü¢ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
const getUserById = async (req, res) => {
  try {
    // D√πng .select('-password') ƒë·ªÉ kh√¥ng tr·∫£ v·ªÅ m·∫≠t kh·∫©u
    const user = await User.findById(req.params.id).select("-password");
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }
    res.status(200).json(user);
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói server khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng", error });
  }
};
// üü¢ L·∫•y th√¥ng tin c√° nh√¢n (ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p)
const getMyProfile = async (req, res) => {
  // Middleware 'protect' ƒë√£ l·∫•y th√¥ng tin user v√† g√°n v√†o req.user
  res.status(200).json(req.user);
};

// üü¢ C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
const updateMyProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);

    if (user) {
      user.name = req.body.name || user.name;
      user.avatar = req.body.avatar || user.avatar;

      const updatedUser = await user.save();

      res.status(200).json({
        _id: updatedUser._id,
        name: updatedUser.name,
        email: updatedUser.email,
        role: updatedUser.role,
        avatar: updatedUser.avatar,
      });
    } else {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }
  } catch (error) {
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t h·ªì s∆°", error });
  }
};

// === CH·ª®C NƒÇNG C·ª¶A ADMIN ===

// üü¢ L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng (ch·ªâ Admin)
const getAllUsers = async (req, res) => {
  try {
    const users = await User.find({}).select("-password");
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng", error });
  }
};


// üü¢ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng b·∫•t k·ª≥ (ch·ªâ Admin)
const updateUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);

    if (user) {
      user.name = req.body.name || user.name;
      // Admin c√≥ th·ªÉ thay ƒë·ªïi role
      user.role = req.body.role || user.role; 

      const updatedUser = await user.save();
      res.status(200).json({
        _id: updatedUser._id,
        name: updatedUser.name,
        email: updatedUser.email,
        role: updatedUser.role,
      });
    } else {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }
  } catch (error) {
     res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng", error });
  }
};


// üü¢ X√≥a ng∆∞·ªùi d√πng (ch·ªâ Admin)
const deleteUser = async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if(user) {
            await user.deleteOne(); // Ho·∫∑c user.remove() ·ªü Mongoose c≈©
            res.status(200).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a."});
        } else {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."});
        }
    } catch (error) {
        res.status(500).json({ message: "L·ªói server khi x√≥a ng∆∞·ªùi d√πng", error });
    }
}

module.exports = {
  registerUser,
  loginUser,
  getUserById,
  getMyProfile,
  updateMyProfile,
  getAllUsers,
  updateUser,
  deleteUser
};